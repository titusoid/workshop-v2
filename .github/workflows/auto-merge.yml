name: Merge when approved, labeled, and green

on:
  pull_request:
    branches: [ main ]
    types: [labeled, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Determine PR number and head SHA
        id: ctx
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO:     ${{ github.repository }}
        run: |
          set -euo pipefail
          case "${{ github.event_name }}" in
            pull_request|pull_request_review)
              echo "num=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
              echo "sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
              ;;
            check_suite)
              sha="${{ github.event.check_suite.head_sha }}"
              num=$(gh api repos/$REPO/pulls --jq ".[] | select(.state==\"open\" and .head.sha==\"$sha\") | .number" | head -n1)
              [ -n "$num" ] || { echo "No open PR for this commit"; exit 1; }
              echo "num=$num" >> $GITHUB_OUTPUT
              echo "sha=$sha"  >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Load PR details
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO:     ${{ github.repository }}
          NUM:      ${{ steps.ctx.outputs.num }}
        run: |
          gh pr view "$NUM" --repo "$REPO" \
            --json number,baseRefName,isDraft,labels,reviews > pr.json
          echo "base=$(jq -r .baseRefName pr.json)" >> $GITHUB_OUTPUT
          echo "draft=$(jq -r .isDraft pr.json)"    >> $GITHUB_OUTPUT
          echo "labels=$(jq -r '[.labels[].name] | join(\",\")' pr.json)" >> $GITHUB_OUTPUT
          echo "approvals=$(jq '[.reviews[] | select(.state==\"APPROVED\") | .author.login] | unique | length' pr.json)" >> $GITHUB_OUTPUT

      - name: Require base main, not draft, has 'merge' label, approvals â‰¥ 1
        run: |
          ok=true
          [ "${{ steps.pr.outputs.base }}" = "main" ]   || { echo "Base not main"; ok=false; }
          [ "${{ steps.pr.outputs.draft }}" = "false" ] || { echo "PR is draft"; ok=false; }
          case ",${{ steps.pr.outputs.labels }}," in
            *,merge,*) ;; *) echo "Missing 'merge' label"; ok=false ;;
          esac
          [ "${{ steps.pr.outputs.approvals }}" -ge 1 ] || { echo "No approvals"; ok=false; }
          [ "$ok" = "true" ] || exit 1

      - name: Require all required checks passed (combined)
        id: checks
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO:     ${{ github.repository }}
          SHA:      ${{ steps.ctx.outputs.sha }}
        run: |
          state=$(gh api repos/$REPO/commits/$SHA/status --jq .state)
          echo "Combined status: $state"
          [ "$state" = "success" ] || { echo "Checks not all green"; exit 1; }

      - name: Merge (squash and delete branch)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO:     ${{ github.repository }}
          NUM:      ${{ steps.ctx.outputs.num }}
        run: |
          gh pr merge "$NUM" --repo "$REPO" --squash --delete-branch --admin=false
